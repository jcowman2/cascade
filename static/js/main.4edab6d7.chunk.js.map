{"version":3,"sources":["types/game.ts","constants.ts","utils/gameUtils.ts","data/levels.ts","context/GameContext.tsx","hooks/gameControls.ts","hooks/pieceDrop.ts","hooks/boardControls.ts","utils/regroupPieces.ts","hooks/pieceControls.ts","components/CellLayer.tsx","components/Cell.tsx","hooks/pieceCellPainter.tsx","components/CascadeWindow.tsx","components/Hero.tsx","components/KeyWindow.tsx","components/LoopManager.tsx","components/Piece.tsx","components/PiecePreview.tsx","components/PieceLayer.tsx","components/DropLayer.tsx","hooks/rectPoller.ts","components/LoopWindow.tsx","components/Board.tsx","components/EndPage.tsx","components/WelcomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScreenId","ItemTypes","ThemeUIColors","preset","colors","GameColors","highlight","slotNumberToCoord","slot","row","Math","floor","x","y","translatePieceToSlot","piece","dest","origin","min","slots","reference","offsetX","offsetY","translated","map","pSlot","slotOffsetY","newRow","FULL_BOARD","_range","ROW_LENGTH","n","Box","board","pieces","id","kind","primary","text","key","Stripes","Levels","GameContext","React","createContext","boardCells","setPieces","setWindowPos","setDraggingPiece","setHoverCell","availableSlots","cascadeView","cascadeMatchesKey","loopSpeed","gameEnded","GameContextProvider","props","useState","setBoardCells","setKey","setGameEnded","onGameEnd","levelNum","setLevelNum","setLoopSpeed","level","useMemo","num","length","console","log","useEffect","goToNextLevel","prev","useLevelManager","windowPos","draggingPiece","hoverCell","draggingId","takenSlots","_flatten","allSlots","_difference","accessiblePieces","filter","slotKinds","slotKindRows","_groupBy","slotKind","cascadeCells","col","slotKindRow","rowCol","find","push","COLUMN_HEIGHT","getCascadeView","cascade","_isEqual","checkCascadeKeyMatch","hasHandled","setHasHandled","onEnd","useCallback","setTimeout","useWatchMatch","Provider","value","children","useCanPieceDrop","useContext","canDrop","potentialSlots","undefined","usePieceDrop","useDrop","accept","dropRef","useBoardControls","highlightedCells","newId","str","random","toString","substr","takeConnected","root","shift","stack","Set","add","node","pop","adjacent","adj","idx","findIndex","splice","Array","from","regroupPieces","splittablePieces","newPieces","kindGroups","groups","group","splitContinuous","forEach","translateSlotHoriz","count","usePieceControls","shiftRight","prevPieces","translatedPieces","p","newSlots","setDragPieceOffset","offset","relX","relY","calculateHoverCell","cleanupDrag","handlePieceDropped","error","handlePieceMissed","canDrag","CellLayer","cells","renderCell","style","position","cellData","top","left","width","height","Cell","showLabel","display","justifyContent","alignItems","usePieceCellPainter","kindFn","config","isHidden","backgroundColor","CascadeWindow","getKind","cell","CELL_WIDTH","borderWidth","borderStyle","borderColor","Hero","margin","flexDirection","KeyWindow","LoopManager","speed","playing","onShift","flag","setFlag","tick","setTick","endBehavior","defaultState","track","duration","state","to","onTick","onUpdate","newFlag","Piece","useDrag","item","type","end","monitor","didDrop","collect","isDragging","drag","preview","getEmptyImage","captureDraggingState","Fragment","ref","el","cursor","PiecePreview","xFromCursor","slotCols","yFromCursor","slotRows","PieceLayer","useDragLayer","getItem","absoluteOffset","getClientOffset","DropLayer","includes","opacity","useRectPoller","rect","setRect","divRef","createRef","current","setInterval","currentRect","getBoundingClientRect","LoopWindow","dashLayerRenderCell","Board","isPlaying","marginBottom","marginTop","EndPage","fontSize","WelcomePage","onClick","onStart","muted","color","padding","borderRadius","App","Welcome","screen","setScreen","screenElement","Game","End","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4edab6d7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface PieceData {\n  id: string | number;\n  slots: number[];\n  kind: PieceKind;\n}\n\nexport interface CellData {\n  slot: number;\n}\n\nexport type ReactSetter<T> = React.Dispatch<React.SetStateAction<T>>;\n\nexport type PieceKind = string;\n\nexport interface CascadeCellData {\n  slot: number;\n  kind: PieceKind;\n}\n\nexport interface Level {\n  board: CellData[];\n  pieces: PieceData[];\n  key: CascadeCellData[];\n}\n\nexport enum ScreenId {\n  Welcome,\n  Game,\n  End\n}\n","import { system as preset } from \"@theme-ui/presets\";\nimport { ColorMode } from \"theme-ui\";\n\nexport const CELL_WIDTH = 70;\nexport const ROW_LENGTH = 12;\nexport const COLUMN_HEIGHT = 4;\nexport const PIECE_PREVIEW_OFFSET = 24;\nexport const SHOW_GRID = false;\n\nexport const ItemTypes = {\n  Piece: \"piece\"\n};\n\nconst ThemeUIColors = preset.colors! as Required<ColorMode>;\n\nexport const GameColors = {\n  ...ThemeUIColors,\n  highlight: \"gold\"\n};\n","import { XYCoord } from \"react-dnd\";\nimport _flatten from \"lodash.flatten\";\nimport _groupBy from \"lodash.groupby\";\nimport _isEqual from \"lodash.isequal\";\nimport { COLUMN_HEIGHT, ROW_LENGTH } from \"../constants\";\nimport { CascadeCellData, PieceData } from \"../types/game\";\n\nconst slotNumberToCoord = (slot: number): XYCoord => {\n  const row = Math.floor(slot / ROW_LENGTH);\n  const col = slot - row * ROW_LENGTH;\n  return { x: col, y: row };\n};\n\nexport const translatePieceToSlot = (\n  piece: PieceData,\n  slot: number\n): PieceData => {\n  const dest = slotNumberToCoord(slot);\n  const origin = Math.min(...piece.slots);\n  const reference = slotNumberToCoord(origin);\n  const offsetX = dest.x - reference.x;\n  const offsetY = dest.y - reference.y;\n\n  const translated = piece.slots.map(pSlot => {\n    const slotOffsetY = pSlot + offsetY * ROW_LENGTH;\n    const newRow = Math.floor(slotOffsetY / ROW_LENGTH);\n    const newSlot =\n      ((slotOffsetY + offsetX) % ROW_LENGTH) + newRow * ROW_LENGTH;\n    return newSlot;\n  });\n\n  return { ...piece, slots: translated };\n};\n\nexport const getCascadeView = (\n  pieces: PieceData[],\n  draggingPiece: PieceData | undefined\n): CascadeCellData[] => {\n  const accessiblePieces = draggingPiece\n    ? pieces.filter(piece => piece.id !== draggingPiece.id)\n    : [...pieces];\n\n  const slotKinds = _flatten(\n    accessiblePieces.map(piece =>\n      piece.slots.map(slot => ({ slot, kind: piece.kind }))\n    )\n  );\n  const slotKindRows = _groupBy(slotKinds, slotKind =>\n    Math.floor(slotKind.slot / ROW_LENGTH)\n  );\n  const cascadeCells: CascadeCellData[] = [];\n\n  for (let col = 0; col < ROW_LENGTH; col++) {\n    for (let row = COLUMN_HEIGHT - 1; row >= 0; row--) {\n      const slotKindRow = slotKindRows[row];\n      if (!slotKindRow) {\n        continue;\n      }\n      const rowCol = slotKindRow.find(\n        slotKind => slotKind.slot === col + row * ROW_LENGTH\n      );\n      if (rowCol) {\n        cascadeCells.push({ slot: col, kind: rowCol.kind });\n        break;\n      }\n    }\n  }\n\n  return cascadeCells;\n};\n\nexport const checkCascadeKeyMatch = (\n  cascade: CascadeCellData[],\n  key: CascadeCellData[]\n) => {\n  return !!(cascade.length && key.length) && _isEqual(cascade, key);\n};\n","import _range from \"lodash.range\";\nimport { ROW_LENGTH, COLUMN_HEIGHT, GameColors } from \"../constants\";\nimport { CellData, Level } from \"../types/game\";\n\nconst FULL_BOARD: CellData[] = _range(0, ROW_LENGTH * COLUMN_HEIGHT).map(n => ({\n  slot: n\n}));\n\nconst Box = {\n  board: FULL_BOARD,\n  pieces: [\n    {\n      id: 0,\n      slots: [17, 18],\n      kind: GameColors.primary\n    },\n    {\n      id: 1,\n      slots: [29, 30],\n      kind: GameColors.text\n    }\n  ],\n  key: [\n    {\n      slot: 5,\n      kind: GameColors.primary\n    },\n    {\n      slot: 6,\n      kind: GameColors.primary\n    },\n    {\n      slot: 7,\n      kind: GameColors.text\n    }\n  ]\n};\n\nconst Stripes = {\n  board: FULL_BOARD,\n  pieces: [\n    {\n      id: 0,\n      slots: [6, 7, 8, 17, 18, 19, 28, 29, 30],\n      kind: GameColors.primary\n    },\n    {\n      id: 1,\n      slots: [9, 10, 11, 20, 21, 22, 29, 30, 31],\n      kind: GameColors.text\n    }\n  ],\n  key: [\n    {\n      slot: 1,\n      kind: GameColors.primary\n    },\n    {\n      slot: 2,\n      kind: GameColors.text\n    },\n    {\n      slot: 3,\n      kind: GameColors.primary\n    },\n    {\n      slot: 4,\n      kind: GameColors.text\n    },\n    {\n      slot: 5,\n      kind: GameColors.primary\n    },\n    {\n      slot: 6,\n      kind: GameColors.text\n    }\n  ]\n};\n\nconst Ribbon = {\n  board: FULL_BOARD,\n  pieces: [\n    {\n      id: 0,\n      slots: [17, 18, 19, 31],\n      kind: GameColors.primary\n    },\n    {\n      id: 1,\n      slots: [1, 13, 25, 14, 26],\n      kind: GameColors.primary\n    },\n    {\n      id: 2,\n      slots: [30, 42, 43],\n      kind: GameColors.text\n    }\n  ],\n  key: [\n    {\n      slot: 1,\n      kind: GameColors.primary\n    },\n    {\n      slot: 2,\n      kind: GameColors.primary\n    },\n    {\n      slot: 3,\n      kind: GameColors.text\n    },\n    {\n      slot: 4,\n      kind: GameColors.text\n    },\n    {\n      slot: 5,\n      kind: GameColors.primary\n    },\n    {\n      slot: 6,\n      kind: GameColors.primary\n    }\n  ]\n};\n\nexport const Levels: Level[] = [Box, Ribbon, Stripes];\n","import React from \"react\";\nimport _flatten from \"lodash.flatten\";\nimport _difference from \"lodash.difference\";\nimport {\n  CascadeCellData,\n  CellData,\n  PieceData,\n  ReactSetter\n} from \"../types/game\";\nimport { XYCoord } from \"react-dnd\";\nimport { checkCascadeKeyMatch, getCascadeView } from \"../utils/gameUtils\";\nimport { useLevelManager, useWatchMatch } from \"../hooks/gameControls\";\n\nexport interface GameContextProps {\n  boardCells: CellData[];\n  pieces: PieceData[];\n  setPieces: ReactSetter<PieceData[]>;\n  windowPos?: XYCoord;\n  setWindowPos: ReactSetter<XYCoord | undefined>;\n  draggingPiece?: PieceData;\n  setDraggingPiece: ReactSetter<PieceData | undefined>;\n  hoverCell?: number;\n  setHoverCell: ReactSetter<number | undefined>;\n  availableSlots: number[];\n  key: CascadeCellData[];\n  cascadeView: CascadeCellData[];\n  cascadeMatchesKey: boolean;\n  loopSpeed: number;\n  gameEnded: boolean;\n}\n\nexport const GameContext = React.createContext<GameContextProps>({\n  boardCells: [],\n  pieces: [],\n  setPieces: () => {},\n  setWindowPos: () => {},\n  setDraggingPiece: () => {},\n  setHoverCell: () => {},\n  availableSlots: [],\n  key: [],\n  cascadeView: [],\n  cascadeMatchesKey: false,\n  loopSpeed: 0,\n  gameEnded: false\n});\n\nexport const GameContextProvider: React.FC = props => {\n  const [boardCells, setBoardCells] = React.useState<CellData[]>([]);\n  const [pieces, setPieces] = React.useState<PieceData[]>([]);\n  const [key, setKey] = React.useState<CascadeCellData[]>([]);\n  const [gameEnded, setGameEnded] = React.useState(false);\n\n  const onGameEnd = () => setGameEnded(true);\n\n  const { goToNextLevel, loopSpeed, setLoopSpeed } = useLevelManager(\n    setBoardCells,\n    setPieces,\n    setKey,\n    onGameEnd\n  );\n\n  const [windowPos, setWindowPos] = React.useState<XYCoord>();\n  const [draggingPiece, setDraggingPiece] = React.useState<PieceData>();\n  const [hoverCell, setHoverCell] = React.useState<number>();\n\n  const availableSlots = React.useMemo(() => {\n    const draggingId = draggingPiece?.id;\n    const takenSlots = _flatten(\n      pieces.map(piece => (piece.id === draggingId ? [] : piece.slots))\n    );\n    const allSlots = boardCells.map(({ slot }) => slot);\n    return _difference(allSlots, takenSlots);\n  }, [draggingPiece, pieces, boardCells]);\n\n  const cascadeView = React.useMemo(() => {\n    return getCascadeView(pieces, draggingPiece);\n  }, [pieces, draggingPiece]);\n  const cascadeMatchesKey = React.useMemo(() => {\n    return checkCascadeKeyMatch(cascadeView, key);\n  }, [cascadeView, key]);\n\n  useWatchMatch(cascadeMatchesKey, setLoopSpeed, goToNextLevel);\n\n  return (\n    <GameContext.Provider\n      value={{\n        boardCells,\n        pieces,\n        setPieces,\n        windowPos,\n        setWindowPos,\n        draggingPiece,\n        setDraggingPiece,\n        hoverCell,\n        setHoverCell,\n        availableSlots,\n        key,\n        cascadeView,\n        cascadeMatchesKey,\n        loopSpeed,\n        gameEnded\n      }}\n    >\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { Levels } from \"../data/levels\";\nimport {\n  ReactSetter,\n  CellData,\n  CascadeCellData,\n  PieceData,\n  Level\n} from \"../types/game\";\n\nexport const useLevelManager = (\n  setBoardCells: ReactSetter<CellData[]>,\n  setPieces: ReactSetter<PieceData[]>,\n  setKey: ReactSetter<CascadeCellData[]>,\n  onGameEnd: () => void\n) => {\n  const [levelNum, setLevelNum] = React.useState(0);\n  const [loopSpeed, setLoopSpeed] = React.useState(0);\n\n  const level: Level = React.useMemo(() => {\n    let num = levelNum;\n    if (num >= Levels.length) {\n      console.log(\"num is too high\", num);\n      num = Levels.length - 1;\n    }\n    const { board, pieces, key } = Levels[num];\n    return {\n      board: [...board],\n      pieces: [...pieces],\n      key: [...key]\n    };\n  }, [levelNum]);\n\n  React.useEffect(() => {\n    setBoardCells(level.board);\n    setPieces(level.pieces);\n    setKey(level.key);\n    setLoopSpeed(1);\n  }, [level, setBoardCells, setPieces, setKey]);\n\n  const goToNextLevel = () => {\n    if (levelNum === Levels.length - 1) {\n      onGameEnd();\n    } else {\n      setLevelNum(prev => prev + 1);\n    }\n  };\n\n  return { level, goToNextLevel, loopSpeed, setLoopSpeed };\n};\n\nexport const useWatchMatch = (\n  cascadeMatchesKey: boolean,\n  setLoopSpeed: ReactSetter<number>,\n  goToNextLevel: () => void\n) => {\n  const [hasHandled, setHasHandled] = React.useState(true);\n\n  const onEnd = React.useCallback(() => {\n    setLoopSpeed(0);\n    setTimeout(goToNextLevel, 1000);\n  }, [setLoopSpeed, goToNextLevel]);\n\n  React.useEffect(() => {\n    if (!cascadeMatchesKey) {\n      return;\n    }\n    setHasHandled(false);\n  }, [cascadeMatchesKey]);\n\n  React.useEffect(() => {\n    if (hasHandled) {\n      return;\n    }\n    onEnd();\n    setHasHandled(true);\n  }, [hasHandled, onEnd]);\n};\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport _difference from \"lodash.difference\";\nimport { ItemTypes } from \"../constants\";\nimport { GameContext } from \"../context/GameContext\";\nimport { translatePieceToSlot } from \"../utils/gameUtils\";\n\nexport const useCanPieceDrop = () => {\n  const { draggingPiece, hoverCell, availableSlots } = React.useContext(\n    GameContext\n  );\n  let canDrop = false;\n  let potentialSlots: number[] = [];\n\n  if (draggingPiece && hoverCell !== undefined) {\n    potentialSlots = translatePieceToSlot(draggingPiece, hoverCell).slots;\n    const takenSlots = _difference(potentialSlots, availableSlots);\n    if (!takenSlots.length) {\n      canDrop = true;\n    }\n  }\n\n  return { canDrop, potentialSlots };\n};\n\nexport const usePieceDrop = () => {\n  const { canDrop } = useCanPieceDrop();\n\n  const [, dropRef] = useDrop({\n    accept: ItemTypes.Piece,\n    canDrop: () => canDrop\n  });\n\n  return { dropRef };\n};\n","import React from \"react\";\nimport { GameContext } from \"../context/GameContext\";\nimport { useCanPieceDrop } from \"./pieceDrop\";\n\nexport const useBoardControls = () => {\n  const {\n    boardCells,\n    setWindowPos,\n    hoverCell,\n    loopSpeed,\n    gameEnded\n  } = React.useContext(GameContext);\n  const { canDrop, potentialSlots } = useCanPieceDrop();\n\n  const highlightedCells = canDrop ? potentialSlots : [];\n\n  return {\n    boardCells,\n    setWindowPos,\n    hoverCell,\n    highlightedCells,\n    loopSpeed,\n    gameEnded\n  };\n};\n","import _groupBy from \"lodash.groupby\";\nimport _flatten from \"lodash.flatten\";\nimport { ROW_LENGTH } from \"../constants\";\nimport { PieceData } from \"../types/game\";\n\nconst newId = (kind: string): string => {\n  const str = Math.random().toString(36);\n  return `${kind}_${str.substr(2, 8)}`;\n};\n\nconst takeConnected = (slots: number[]) => {\n  if (!slots.length) {\n    return [];\n  }\n\n  const root = slots.shift()!;\n\n  const stack = [root];\n  const piece = new Set<number>();\n  piece.add(root);\n\n  while (stack.length) {\n    const node = stack.pop()!;\n    const adjacent = [node - ROW_LENGTH, node + ROW_LENGTH];\n    if (node % ROW_LENGTH > 0) {\n      adjacent.push(node - 1);\n    }\n    if ((node + 1) % ROW_LENGTH > 0) {\n      adjacent.push(node + 1);\n    }\n    for (const adj of adjacent) {\n      const idx = slots.findIndex(n => n === adj);\n      if (idx > -1) {\n        slots.splice(idx, 1);\n        stack.push(adj);\n        piece.add(adj);\n      }\n    }\n  }\n\n  return Array.from(piece);\n};\n\nconst splitContinuous = (slots: number[]) => {\n  const groups = [];\n  while (slots.length > 0) {\n    const group = takeConnected(slots);\n    groups.push(group);\n  }\n  return groups;\n};\n\nexport const regroupPieces = (\n  pieces: PieceData[],\n  draggingPiece: PieceData | undefined\n): PieceData[] => {\n  const splittablePieces = draggingPiece\n    ? pieces.filter(piece => piece.id !== draggingPiece.id)\n    : [...pieces];\n\n  const newPieces: PieceData[] = [];\n\n  const kindGroups = _groupBy(splittablePieces, \"kind\");\n  for (const key in kindGroups) {\n    const slotGroup = _flatten(kindGroups[key].map(piece => piece.slots));\n    const continuousGroups = splitContinuous(slotGroup);\n    continuousGroups\n      .map(slots => ({ id: newId(\"piece\"), slots, kind: key }))\n      .forEach(piece => newPieces.push(piece));\n  }\n\n  if (draggingPiece) {\n    newPieces.push(draggingPiece);\n  }\n\n  return newPieces;\n};\n","import React from \"react\";\nimport { XYCoord } from \"react-dnd\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport { GameContext } from \"../context/GameContext\";\nimport { PieceData } from \"../types/game\";\nimport { translatePieceToSlot } from \"../utils/gameUtils\";\nimport { regroupPieces } from \"../utils/regroupPieces\";\n\nconst translateSlotHoriz = (slot: number, count: number) => {\n  const y = Math.floor(slot / ROW_LENGTH);\n  const prevX = slot - y * ROW_LENGTH;\n  const newX = (prevX + count) % ROW_LENGTH;\n  const newSlot = newX + y * ROW_LENGTH;\n  return newSlot;\n};\n\nconst calculateHoverCell = (windowPos: XYCoord, offset: XYCoord) => {\n  const relX = offset.x - windowPos.x;\n  const relY = offset.y - windowPos.y;\n  const row = Math.floor(relY / CELL_WIDTH);\n  const hoverCell = ROW_LENGTH * row + Math.floor(relX / CELL_WIDTH);\n  return hoverCell;\n};\n\nexport const usePieceControls = () => {\n  const {\n    pieces,\n    setPieces,\n    setDraggingPiece,\n    windowPos,\n    setHoverCell,\n    hoverCell,\n    draggingPiece,\n    cascadeMatchesKey\n  } = React.useContext(GameContext);\n\n  const shiftRight = React.useCallback(\n    (count: number = 1) => {\n      setPieces(prevPieces => {\n        const translatedPieces = prevPieces.map(p => {\n          const newSlots = p.slots.map(slot => translateSlotHoriz(slot, count));\n          return { ...p, slots: newSlots };\n        });\n        return regroupPieces(translatedPieces, draggingPiece);\n      });\n    },\n    [draggingPiece, setPieces]\n  );\n\n  // const removePiece = (pieceId: string | number) => {\n  //   setPieces(prevPieces => prevPieces.filter(({ id }) => id !== pieceId));\n  // };\n\n  const setDragPieceOffset = React.useCallback(\n    (piece: PieceData, offset: XYCoord) => {\n      setDraggingPiece(piece);\n      if (!windowPos) {\n        return;\n      }\n      setHoverCell(calculateHoverCell(windowPos, offset));\n    },\n    [setDraggingPiece, setHoverCell, windowPos]\n  );\n\n  const cleanupDrag = () => {\n    setDraggingPiece(undefined);\n    setHoverCell(undefined);\n  };\n\n  const handlePieceDropped = (piece: PieceData) => {\n    console.log(\"dropped at\", hoverCell);\n    if (hoverCell === undefined) {\n      console.error(\"handlePieceDropped\", piece, hoverCell);\n      return;\n    }\n    setPieces(prevPieces => {\n      const translatedPieces = prevPieces.map(p =>\n        p.id === piece.id ? translatePieceToSlot(piece, hoverCell) : p\n      );\n      return regroupPieces(translatedPieces, undefined);\n    });\n    cleanupDrag();\n  };\n\n  const handlePieceMissed = (piece: PieceData) => {\n    console.log(\"missed at\", hoverCell);\n    cleanupDrag();\n  };\n\n  const canDrag = !cascadeMatchesKey;\n\n  return {\n    pieces,\n    shiftRight,\n    setDragPieceOffset,\n    handlePieceDropped,\n    handlePieceMissed,\n    canDrag\n  };\n};\n","import React from \"react\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport { CellData } from \"../types/game\";\n\nexport interface CellLayerProps {\n  cells: CellData[];\n  renderCell: React.FC<CellData>;\n}\n\nconst CellLayer: React.FC<CellLayerProps> = props => {\n  const { cells, renderCell } = props;\n\n  return (\n    <div style={{ position: \"absolute\" }}>\n      {cells.map(cellData => {\n        const { slot } = cellData;\n        const y = Math.floor(slot / ROW_LENGTH);\n        const x = slot - y * ROW_LENGTH;\n        return (\n          <div\n            key={slot}\n            style={{\n              position: \"absolute\",\n              top: y * CELL_WIDTH,\n              left: x * CELL_WIDTH,\n              width: CELL_WIDTH,\n              height: CELL_WIDTH\n            }}\n          >\n            {renderCell(cellData)}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n// export default React.memo(CellLayer);\nexport default CellLayer;\n","import React from \"react\";\nimport { CELL_WIDTH } from \"../constants\";\n\nexport interface CellProps {\n  slot: number;\n  style?: React.CSSProperties;\n  showLabel?: boolean;\n}\n\nconst Cell: React.FC<CellProps> = props => {\n  const { slot, style = {}, showLabel = false } = props;\n  const width = CELL_WIDTH;\n  return (\n    <div\n      style={{\n        width,\n        height: width,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        ...style\n      }}\n    >\n      {showLabel && <span>{slot}</span>}\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"../components/Cell\";\nimport { GameContext } from \"../context/GameContext\";\nimport { PieceKind } from \"../types/game\";\n\nconst usePieceCellPainter = (\n  kindFn: (slot: number) => PieceKind,\n  config: { isHidden: boolean } = { isHidden: false }\n) => {\n  const { cascadeMatchesKey } = React.useContext(GameContext);\n  const { isHidden } = config;\n\n  const renderCell = React.useCallback(\n    ({ slot }) => {\n      const kind = cascadeMatchesKey ? \"gold\" : kindFn(slot);\n      return (\n        <Cell\n          slot={slot}\n          style={isHidden ? { display: \"none\" } : { backgroundColor: kind }}\n        />\n      );\n    },\n    [kindFn, isHidden, cascadeMatchesKey]\n  );\n  return renderCell;\n};\n\nexport default usePieceCellPainter;\n","import React from \"react\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport CellLayer from \"./CellLayer\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\nimport { GameContext } from \"../context/GameContext\";\n\nexport interface CascadeWindowProps {\n  style?: React.CSSProperties;\n}\n\nconst CascadeWindow: React.FC<CascadeWindowProps> = props => {\n  const { style = {} } = props;\n  const { cascadeView } = React.useContext(GameContext);\n\n  const width = CELL_WIDTH * ROW_LENGTH;\n  const height = CELL_WIDTH;\n\n  const getKind = React.useCallback(\n    (slot: number) => cascadeView.find(cell => cell.slot === slot)!.kind,\n    [cascadeView]\n  );\n  const renderCell = usePieceCellPainter(getKind);\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: \"text\",\n        ...style\n      }}\n    >\n      <CellLayer cells={cascadeView} renderCell={renderCell} />\n    </div>\n  );\n};\n\nexport default CascadeWindow;\n","import React from \"react\";\n\nexport interface HeroProps {}\n\nconst Hero: React.FC<HeroProps> = props => {\n  return (\n    <div\n      style={{\n        margin: \"auto\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n        flexDirection: \"column\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Hero;\n","import React from \"react\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport { GameContext } from \"../context/GameContext\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\nimport CellLayer from \"./CellLayer\";\n\nexport interface KeyWindowProps {\n  style?: React.CSSProperties;\n}\n\nconst KeyWindow: React.FC<KeyWindowProps> = props => {\n  const { style } = props;\n  const { key } = React.useContext(GameContext);\n\n  const width = CELL_WIDTH * ROW_LENGTH;\n  const height = CELL_WIDTH;\n\n  const getKind = React.useCallback(\n    (slot: number) => key.find(cell => cell.slot === slot)!.kind,\n    [key]\n  );\n  const renderCell = usePieceCellPainter(getKind);\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: \"text\",\n        ...style\n      }}\n    >\n      <CellLayer cells={key} renderCell={renderCell} />\n    </div>\n  );\n};\n\nexport default KeyWindow;\n","import React from \"react\";\nimport { Timeline } from \"react-ensemble\";\n\nexport interface LoopManagerProps {\n  speed: number;\n  playing: boolean;\n  onShift: () => void;\n}\n\nconst LoopManager: React.FC<LoopManagerProps> = props => {\n  const { speed, playing, onShift } = props;\n  const [flag, setFlag] = React.useState(false);\n  const [tick, setTick] = React.useState(0);\n\n  // if (!speed) {\n  //   return null;\n  // }\n\n  return (\n    <Timeline\n      playing={playing}\n      endBehavior=\"loop\"\n      defaultState={{ flag: 0 }}\n      track={[\n        { duration: speed ? 2000 / speed : 2000, state: { flag: { to: 2 } } }\n      ]}\n      value={tick}\n      onTick={({ value }) => setTick(value)}\n      onUpdate={({ state }) => {\n        const newFlag = !!Math.floor(state.flag);\n        if (newFlag !== flag) {\n          onShift();\n        }\n        setFlag(newFlag);\n      }}\n    />\n  );\n};\n\nexport default LoopManager;\n","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport CellLayer from \"./CellLayer\";\nimport { ItemTypes } from \"../constants\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { PieceData } from \"../types/game\";\nimport { usePieceControls } from \"../hooks/pieceControls\";\nimport { usePieceDrop } from \"../hooks/pieceDrop\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\n\nexport interface PieceProps extends PieceData {}\n\nconst Piece: React.FC<PieceProps> = props => {\n  const { slots, kind, id } = props;\n  const { handlePieceDropped, handlePieceMissed, canDrag } = usePieceControls();\n  const { dropRef } = usePieceDrop();\n\n  const [{ isDragging }, drag, preview] = useDrag({\n    item: { type: ItemTypes.Piece, slots, kind, id },\n    end: (item, monitor) => {\n      if (!item) {\n        return;\n      }\n      const didDrop = monitor.didDrop();\n      if (didDrop) {\n        handlePieceDropped(item);\n      } else {\n        handlePieceMissed(item);\n      }\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    }),\n    canDrag: () => canDrag\n  });\n\n  React.useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, [preview]);\n\n  const cells = React.useMemo(() => slots.map(slot => ({ slot })), [slots]);\n  const getKind = React.useCallback(() => kind, [kind]);\n  const renderCell = usePieceCellPainter(getKind, { isHidden: isDragging });\n\n  function doubleRef(el: any) {\n    drag(el);\n    dropRef(el);\n  }\n\n  return (\n    <React.Fragment>\n      <div\n        ref={doubleRef}\n        style={{\n          cursor: canDrag ? \"move\" : undefined,\n          position: \"absolute\"\n        }}\n      >\n        <CellLayer cells={cells} renderCell={renderCell} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Piece;\n","import React from \"react\";\nimport { XYCoord } from \"react-dnd\";\nimport {\n  CELL_WIDTH,\n  COLUMN_HEIGHT,\n  PIECE_PREVIEW_OFFSET,\n  ROW_LENGTH\n} from \"../constants\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\nimport { PieceData } from \"../types/game\";\nimport CellLayer from \"./CellLayer\";\n\nexport interface PiecePreviewProps {\n  piece: PieceData;\n  offset: XYCoord;\n}\n\nconst PiecePreview: React.FC<PiecePreviewProps> = props => {\n  const { piece, offset } = props;\n  const { slots } = piece;\n\n  const cells = React.useMemo(() => slots.map(slot => ({ slot })), [slots]);\n  const getKind = React.useCallback(() => piece.kind, [piece]);\n  const renderCell = usePieceCellPainter(getKind);\n\n  const xFromCursor = React.useMemo(() => {\n    const slotCols = piece.slots.map(slot => slot % ROW_LENGTH);\n    const minSlot = Math.min(...slotCols);\n    return minSlot * CELL_WIDTH;\n  }, [piece]);\n\n  const yFromCursor = React.useMemo(() => {\n    const slotRows = piece.slots.map(slot => slot % COLUMN_HEIGHT);\n    const minRow = Math.min(...slotRows);\n    return minRow * CELL_WIDTH;\n  }, [piece]);\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        top: offset.y - yFromCursor + PIECE_PREVIEW_OFFSET,\n        left: offset.x - xFromCursor + PIECE_PREVIEW_OFFSET\n      }}\n    >\n      <CellLayer cells={cells} renderCell={renderCell} />\n    </div>\n  );\n};\n\nexport default PiecePreview;\n","import React from \"react\";\nimport { useDragLayer } from \"react-dnd\";\nimport { usePieceControls } from \"../hooks/pieceControls\";\nimport { PieceData } from \"../types/game\";\nimport Piece from \"./Piece\";\nimport PiecePreview from \"./PiecePreview\";\n\nexport interface PieceLayerProps {\n  pieces: PieceData[];\n}\n\nconst PieceLayer: React.FC<PieceLayerProps> = props => {\n  const { pieces } = props;\n  const { setDragPieceOffset } = usePieceControls();\n\n  const { item, absoluteOffset } = useDragLayer(monitor => ({\n    item: monitor.getItem() as PieceData | undefined,\n    absoluteOffset: monitor.getClientOffset()\n  }));\n\n  React.useEffect(() => {\n    if (item && absoluteOffset) {\n      setDragPieceOffset(item, absoluteOffset);\n    }\n  }, [item, absoluteOffset, setDragPieceOffset]);\n\n  return (\n    <React.Fragment>\n      {item && absoluteOffset && (\n        <PiecePreview piece={item} offset={absoluteOffset} />\n      )}\n      {pieces.map(piece => (\n        <Piece\n          key={piece.id}\n          id={piece.id}\n          slots={piece.slots}\n          kind={piece.kind}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default PieceLayer;\n","import React from \"react\";\nimport { GameColors } from \"../constants\";\nimport { useBoardControls } from \"../hooks/boardControls\";\nimport { usePieceDrop } from \"../hooks/pieceDrop\";\nimport { CellData } from \"../types/game\";\nimport Cell from \"./Cell\";\nimport CellLayer from \"./CellLayer\";\n\nexport interface DropLayerProps {\n  cells: CellData[];\n}\n\nconst DropLayer: React.FC<DropLayerProps> = props => {\n  const { cells } = props;\n  const { highlightedCells } = useBoardControls();\n  const { dropRef } = usePieceDrop();\n\n  return (\n    <div ref={dropRef}>\n      <CellLayer\n        cells={cells}\n        renderCell={({ slot }) => (\n          <Cell\n            key={slot}\n            slot={slot}\n            style={{\n              backgroundColor: highlightedCells.includes(slot)\n                ? GameColors.highlight\n                : \"inherit\",\n              opacity: 0.5\n            }}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default DropLayer;\n","import React from \"react\";\n\nconst useRectPoller = () => {\n  const [rect, setRect] = React.useState<DOMRect>();\n  const divRef = React.createRef<HTMLDivElement>();\n\n  React.useEffect(() => {\n    if (!divRef.current) {\n      return;\n    }\n    setInterval(() => {\n      if (!divRef.current) {\n        return;\n      }\n      const currentRect = divRef.current.getBoundingClientRect();\n      setRect(currentRect);\n    }, 1000);\n  }, [divRef]);\n\n  const top = rect?.top;\n  const left = rect?.left;\n\n  return { rect, divRef, top, left };\n};\n\nexport default useRectPoller;\n","import React from \"react\";\nimport { CELL_WIDTH, COLUMN_HEIGHT, ROW_LENGTH, SHOW_GRID } from \"../constants\";\nimport Cell from \"./Cell\";\nimport CellLayer from \"./CellLayer\";\nimport PieceLayer from \"./PieceLayer\";\nimport DropLayer from \"./DropLayer\";\nimport { CellData, PieceData } from \"../types/game\";\nimport useRectPoller from \"../hooks/rectPoller\";\nimport { useBoardControls } from \"../hooks/boardControls\";\n\nexport interface LoopWindowProps {\n  boardCells: CellData[];\n  pieces: PieceData[];\n}\n\nconst LoopWindow: React.FC<LoopWindowProps> = props => {\n  const { boardCells, pieces } = props;\n  const { setWindowPos } = useBoardControls();\n  const { top, left, divRef } = useRectPoller();\n\n  React.useEffect(() => {\n    if (top === undefined || left === undefined) {\n      return;\n    }\n    setWindowPos({ x: left, y: top });\n  }, [top, left, setWindowPos]);\n\n  const width = CELL_WIDTH * ROW_LENGTH;\n  const height = CELL_WIDTH * COLUMN_HEIGHT;\n\n  const dashLayerRenderCell = React.useCallback(\n    ({ slot }) => (\n      <Cell\n        slot={slot}\n        showLabel={SHOW_GRID}\n        style={\n          SHOW_GRID\n            ? {\n                borderWidth: 1,\n                borderColor: \"text\",\n                borderStyle: \"dashed\",\n                opacity: 0.5\n              }\n            : undefined\n        }\n      />\n    ),\n    []\n  );\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: \"text\"\n      }}\n      ref={divRef}\n    >\n      <CellLayer cells={boardCells} renderCell={dashLayerRenderCell} />\n      <DropLayer cells={boardCells} />\n      <PieceLayer pieces={pieces} />\n    </div>\n  );\n};\n\nexport default LoopWindow;\n","import React from \"react\";\nimport { useBoardControls } from \"../hooks/boardControls\";\nimport { usePieceControls } from \"../hooks/pieceControls\";\nimport CascadeWindow from \"./CascadeWindow\";\nimport Hero from \"./Hero\";\nimport KeyWindow from \"./KeyWindow\";\nimport LoopManager from \"./LoopManager\";\nimport LoopWindow from \"./LoopWindow\";\n\nexport interface BoardProps {\n  onGameEnd: () => void;\n}\n\nconst Board: React.FC<BoardProps> = props => {\n  const { onGameEnd } = props;\n  const { boardCells, loopSpeed, gameEnded } = useBoardControls();\n  const { pieces, shiftRight } = usePieceControls();\n\n  const isPlaying = !!loopSpeed;\n\n  React.useEffect(() => {\n    if (gameEnded) {\n      onGameEnd();\n    }\n  }, [onGameEnd, gameEnded]);\n\n  return (\n    <Hero>\n      <LoopManager speed={loopSpeed} playing={isPlaying} onShift={shiftRight} />\n\n      <KeyWindow style={{ marginBottom: 36 }} />\n      <LoopWindow boardCells={boardCells} pieces={pieces} />\n      <CascadeWindow style={{ marginTop: 36 }} />\n    </Hero>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Hero from \"./Hero\";\n\nexport interface EndPageProps {}\n\nconst EndPage: React.FC<EndPageProps> = props => {\n  return (\n    <Hero>\n      <h1 style={{ fontSize: \"4em\", marginBottom: 0 }}>Thank you!</h1>\n      <p>If you'd like to see more levels, please leave feedback!</p>\n    </Hero>\n  );\n};\n\nexport default EndPage;\n","import React from \"react\";\nimport { GameColors } from \"../constants\";\nimport Hero from \"./Hero\";\n\nexport interface WelcomePageProps {\n  onStart: () => void;\n}\n\nconst WelcomePage: React.FC<WelcomePageProps> = props => {\n  return (\n    <Hero>\n      <h1 style={{ fontSize: \"6em\", marginBottom: 0 }}>Cascade</h1>\n      <p>Created in one weekend for Ludum Dare 47</p>\n      <div style={{ marginBottom: 24 }}>\n        <h2>Instructions:</h2>\n        <ul>\n          <li>Drag and drop pieces on the board with the mouse</li>\n          <li>\n            Colors cascade down vertically, collecting at the bottom of the\n            board\n          </li>\n          <li>Make the bottom window match the key at the top of the board</li>\n        </ul>\n      </div>\n      <button\n        onClick={props.onStart}\n        style={{\n          fontSize: \"2em\",\n          backgroundColor: GameColors.muted,\n          color: GameColors.text,\n          padding: 8,\n          borderRadius: 8\n        }}\n      >\n        Start Game\n      </button>\n    </Hero>\n  );\n};\n\nexport default WelcomePage;\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport EndPage from \"./components/EndPage\";\nimport WelcomePage from \"./components/WelcomePage\";\nimport { GameContextProvider } from \"./context/GameContext\";\nimport { ScreenId } from \"./types/game\";\n\nfunction App() {\n  const [screen, setScreen] = React.useState<ScreenId>(ScreenId.Welcome);\n  let screenElement = null;\n\n  const startGame = () => setScreen(ScreenId.Game);\n  const endGame = () => setScreen(ScreenId.End);\n\n  switch (screen) {\n    case ScreenId.Welcome:\n      screenElement = <WelcomePage onStart={startGame} />;\n      break;\n    case ScreenId.End:\n      screenElement = <EndPage />;\n      break;\n    case ScreenId.Game:\n    default:\n      screenElement = <Board onGameEnd={endGame} />;\n  }\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <GameContextProvider>\n        <div>{screenElement}</div>\n      </GameContextProvider>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}