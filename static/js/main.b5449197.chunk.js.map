{"version":3,"sources":["constants.ts","utils/gameUtils.ts","context/GameContext.tsx","hooks/pieceDrop.ts","hooks/boardControls.ts","utils/regroupPieces.ts","hooks/pieceControls.ts","components/CellLayer.tsx","components/Cell.tsx","hooks/pieceCellPainter.tsx","components/CascadeWindow.tsx","components/KeyWindow.tsx","components/LoopManager.tsx","components/Piece.tsx","components/PiecePreview.tsx","components/PieceLayer.tsx","components/DropLayer.tsx","hooks/rectPoller.ts","components/LoopWindow.tsx","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemTypes","ThemeUIColors","preset","colors","GameColors","highlight","slotNumberToCoord","slot","row","Math","floor","x","y","translatePieceToSlot","piece","dest","origin","min","slots","reference","offsetX","offsetY","translated","map","pSlot","slotOffsetY","newRow","GameContext","React","createContext","boardCells","pieces","setPieces","setWindowPos","setDraggingPiece","setHoverCell","availableSlots","key","cascadeView","cascadeMatchesKey","FULL_BOARD","_range","ROW_LENGTH","n","DEFAULT_PIECES","id","kind","primary","text","DEFAULT_KEY","GameContextProvider","props","useState","windowPos","draggingPiece","hoverCell","useMemo","draggingId","takenSlots","_flatten","allSlots","_difference","accessiblePieces","filter","slotKinds","slotKindRows","_groupBy","slotKind","cascadeCells","col","slotKindRow","rowCol","find","push","COLUMN_HEIGHT","getCascadeView","cascade","_isEqual","checkCascadeKeyMatch","Provider","value","children","useCanPieceDrop","useContext","canDrop","potentialSlots","undefined","length","usePieceDrop","useDrop","accept","dropRef","useBoardControls","highlightedCells","newId","str","random","toString","substr","takeConnected","root","shift","stack","Set","add","node","pop","adjacent","adj","idx","findIndex","splice","Array","from","regroupPieces","splittablePieces","newPieces","kindGroups","groups","group","splitContinuous","forEach","translateSlotHoriz","count","usePieceControls","shiftRight","useCallback","prevPieces","translatedPieces","p","newSlots","setDragPieceOffset","offset","relX","relY","calculateHoverCell","cleanupDrag","handlePieceDropped","console","log","error","handlePieceMissed","CellLayer","cells","renderCell","style","position","cellData","top","left","width","height","Cell","showLabel","display","justifyContent","alignItems","usePieceCellPainter","kindFn","config","isHidden","backgroundColor","CascadeWindow","getKind","cell","CELL_WIDTH","borderWidth","borderStyle","borderColor","KeyWindow","LoopManager","speed","playing","onShift","flag","setFlag","tick","setTick","endBehavior","defaultState","track","duration","state","to","onTick","onUpdate","newFlag","Piece","useDrag","item","type","end","monitor","didDrop","collect","isDragging","drag","preview","useEffect","getEmptyImage","captureDraggingState","Fragment","ref","el","cursor","PiecePreview","xFromCursor","slotCols","yFromCursor","slotRows","PieceLayer","useDragLayer","getItem","absoluteOffset","getClientOffset","DropLayer","includes","opacity","useRectPoller","rect","setRect","divRef","createRef","current","setInterval","currentRect","getBoundingClientRect","LoopWindow","dashLayerRenderCell","Board","isPlaying","setIsPlaying","margin","flexDirection","marginBottom","marginTop","onClick","prev","App","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b5449197.chunk.js","sourcesContent":["import { system as preset, system } from \"@theme-ui/presets\";\nimport { ColorMode } from \"theme-ui\";\n\nexport const CELL_WIDTH = 80;\nexport const ROW_LENGTH = 12;\nexport const COLUMN_HEIGHT = 4;\nexport const PIECE_PREVIEW_OFFSET = 24;\n\nexport const ItemTypes = {\n  Piece: \"piece\"\n};\n\nconst ThemeUIColors = preset.colors! as Required<ColorMode>;\n\nexport const GameColors = {\n  ...ThemeUIColors,\n  highlight: \"gold\"\n};\n","import { XYCoord } from \"react-dnd\";\nimport _flatten from \"lodash.flatten\";\nimport _groupBy from \"lodash.groupby\";\nimport _isEqual from \"lodash.isequal\";\nimport { COLUMN_HEIGHT, ROW_LENGTH } from \"../constants\";\nimport { CascadeCellData, PieceData } from \"../types/game\";\n\nconst slotNumberToCoord = (slot: number): XYCoord => {\n  const row = Math.floor(slot / ROW_LENGTH);\n  const col = slot - row * ROW_LENGTH;\n  return { x: col, y: row };\n};\n\nexport const translatePieceToSlot = (\n  piece: PieceData,\n  slot: number\n): PieceData => {\n  const dest = slotNumberToCoord(slot);\n  const origin = Math.min(...piece.slots);\n  const reference = slotNumberToCoord(origin);\n  const offsetX = dest.x - reference.x;\n  const offsetY = dest.y - reference.y;\n\n  const translated = piece.slots.map(pSlot => {\n    const slotOffsetY = pSlot + offsetY * ROW_LENGTH;\n    const newRow = Math.floor(slotOffsetY / ROW_LENGTH);\n    const newSlot =\n      ((slotOffsetY + offsetX) % ROW_LENGTH) + newRow * ROW_LENGTH;\n    return newSlot;\n  });\n\n  return { ...piece, slots: translated };\n};\n\nexport const getCascadeView = (\n  pieces: PieceData[],\n  draggingPiece: PieceData | undefined\n): CascadeCellData[] => {\n  const accessiblePieces = draggingPiece\n    ? pieces.filter(piece => piece.id !== draggingPiece.id)\n    : [...pieces];\n\n  const slotKinds = _flatten(\n    accessiblePieces.map(piece =>\n      piece.slots.map(slot => ({ slot, kind: piece.kind }))\n    )\n  );\n  const slotKindRows = _groupBy(slotKinds, slotKind =>\n    Math.floor(slotKind.slot / ROW_LENGTH)\n  );\n  const cascadeCells: CascadeCellData[] = [];\n\n  for (let col = 0; col < ROW_LENGTH; col++) {\n    for (let row = COLUMN_HEIGHT - 1; row >= 0; row--) {\n      const slotKindRow = slotKindRows[row];\n      if (!slotKindRow) {\n        continue;\n      }\n      const rowCol = slotKindRow.find(\n        slotKind => slotKind.slot === col + row * ROW_LENGTH\n      );\n      if (rowCol) {\n        cascadeCells.push({ slot: col, kind: rowCol.kind });\n        break;\n      }\n    }\n  }\n\n  return cascadeCells;\n};\n\nexport const checkCascadeKeyMatch = (\n  cascade: CascadeCellData[],\n  key: CascadeCellData[]\n) => {\n  return _isEqual(cascade, key);\n};\n","import React from \"react\";\nimport _range from \"lodash.range\";\nimport _flatten from \"lodash.flatten\";\nimport _difference from \"lodash.difference\";\nimport { ROW_LENGTH, COLUMN_HEIGHT, GameColors } from \"../constants\";\nimport {\n  CascadeCellData,\n  CellData,\n  PieceData,\n  ReactSetter\n} from \"../types/game\";\nimport { XYCoord } from \"react-dnd\";\nimport { checkCascadeKeyMatch, getCascadeView } from \"../utils/gameUtils\";\n\nexport interface GameContextProps {\n  boardCells: CellData[];\n  pieces: PieceData[];\n  setPieces: ReactSetter<PieceData[]>;\n  windowPos?: XYCoord;\n  setWindowPos: ReactSetter<XYCoord | undefined>;\n  draggingPiece?: PieceData;\n  setDraggingPiece: ReactSetter<PieceData | undefined>;\n  hoverCell?: number;\n  setHoverCell: ReactSetter<number | undefined>;\n  availableSlots: number[];\n  key: CascadeCellData[];\n  cascadeView: CascadeCellData[];\n  cascadeMatchesKey: boolean;\n}\n\nexport const GameContext = React.createContext<GameContextProps>({\n  boardCells: [],\n  pieces: [],\n  setPieces: () => {},\n  setWindowPos: () => {},\n  setDraggingPiece: () => {},\n  setHoverCell: () => {},\n  availableSlots: [],\n  key: [],\n  cascadeView: [],\n  cascadeMatchesKey: false\n});\n\nconst FULL_BOARD: CellData[] = _range(0, ROW_LENGTH * COLUMN_HEIGHT).map(n => ({\n  slot: n\n}));\n\nconst DEFAULT_PIECES: PieceData[] = [\n  {\n    id: 0,\n    slots: [17, 18, 19, 31],\n    kind: GameColors.primary\n  },\n  {\n    id: 1,\n    slots: [1, 13, 25, 14, 26],\n    kind: GameColors.primary\n  },\n  {\n    id: 2,\n    slots: [30, 42, 43],\n    kind: GameColors.text\n  }\n];\n\nconst DEFAULT_KEY: CascadeCellData[] = [\n  {\n    slot: 1,\n    kind: GameColors.primary\n  },\n  {\n    slot: 2,\n    kind: GameColors.primary\n  },\n  {\n    slot: 3,\n    kind: GameColors.text\n  },\n  {\n    slot: 4,\n    kind: GameColors.text\n  },\n  {\n    slot: 5,\n    kind: GameColors.primary\n  },\n  {\n    slot: 6,\n    kind: GameColors.primary\n  }\n];\n\nexport const GameContextProvider: React.FC = props => {\n  const [boardCells, setBoardCells] = React.useState(FULL_BOARD);\n  const [pieces, setPieces] = React.useState(DEFAULT_PIECES);\n  const [windowPos, setWindowPos] = React.useState<XYCoord>();\n  const [draggingPiece, setDraggingPiece] = React.useState<PieceData>();\n  const [hoverCell, setHoverCell] = React.useState<number>();\n  const [key, setKey] = React.useState(DEFAULT_KEY);\n\n  const availableSlots = React.useMemo(() => {\n    const draggingId = draggingPiece?.id;\n    const takenSlots = _flatten(\n      pieces.map(piece => (piece.id === draggingId ? [] : piece.slots))\n    );\n    const allSlots = boardCells.map(({ slot }) => slot);\n    return _difference(allSlots, takenSlots);\n  }, [draggingPiece, pieces, boardCells]);\n\n  const cascadeView = React.useMemo(() => {\n    return getCascadeView(pieces, draggingPiece);\n  }, [pieces, draggingPiece]);\n  const cascadeMatchesKey = React.useMemo(() => {\n    return checkCascadeKeyMatch(cascadeView, key);\n  }, [cascadeView, key]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        boardCells,\n        pieces,\n        setPieces,\n        windowPos,\n        setWindowPos,\n        draggingPiece,\n        setDraggingPiece,\n        hoverCell,\n        setHoverCell,\n        availableSlots,\n        key,\n        cascadeView,\n        cascadeMatchesKey\n      }}\n    >\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport _difference from \"lodash.difference\";\nimport { ItemTypes } from \"../constants\";\nimport { GameContext } from \"../context/GameContext\";\nimport { translatePieceToSlot } from \"../utils/gameUtils\";\n\nexport const useCanPieceDrop = () => {\n  const { draggingPiece, hoverCell, availableSlots } = React.useContext(\n    GameContext\n  );\n  let canDrop = false;\n  let potentialSlots: number[] = [];\n\n  if (draggingPiece && hoverCell !== undefined) {\n    potentialSlots = translatePieceToSlot(draggingPiece, hoverCell).slots;\n    const takenSlots = _difference(potentialSlots, availableSlots);\n    if (!takenSlots.length) {\n      canDrop = true;\n    }\n  }\n\n  return { canDrop, potentialSlots };\n};\n\nexport const usePieceDrop = () => {\n  const { canDrop } = useCanPieceDrop();\n\n  const [, dropRef] = useDrop({\n    accept: ItemTypes.Piece,\n    canDrop: () => canDrop\n  });\n\n  return { dropRef };\n};\n","import React from \"react\";\nimport { GameContext } from \"../context/GameContext\";\nimport { useCanPieceDrop } from \"./pieceDrop\";\n\nexport const useBoardControls = () => {\n  const { boardCells, setWindowPos, hoverCell } = React.useContext(GameContext);\n  const { canDrop, potentialSlots } = useCanPieceDrop();\n\n  const highlightedCells = canDrop ? potentialSlots : [];\n\n  return { boardCells, setWindowPos, hoverCell, highlightedCells };\n};\n","import _groupBy from \"lodash.groupby\";\nimport _flatten from \"lodash.flatten\";\nimport { ROW_LENGTH } from \"../constants\";\nimport { PieceData } from \"../types/game\";\n\nconst newId = (kind: string): string => {\n  const str = Math.random().toString(36);\n  return `${kind}_${str.substr(2, 8)}`;\n};\n\nconst takeConnected = (slots: number[]) => {\n  if (!slots.length) {\n    return [];\n  }\n\n  const root = slots.shift()!;\n\n  const stack = [root];\n  const piece = new Set<number>();\n  piece.add(root);\n\n  while (stack.length) {\n    const node = stack.pop()!;\n    const adjacent = [node - ROW_LENGTH, node + ROW_LENGTH];\n    if (node % ROW_LENGTH > 0) {\n      adjacent.push(node - 1);\n    }\n    if ((node + 1) % ROW_LENGTH > 0) {\n      adjacent.push(node + 1);\n    }\n    for (const adj of adjacent) {\n      const idx = slots.findIndex(n => n === adj);\n      if (idx > -1) {\n        slots.splice(idx, 1);\n        stack.push(adj);\n        piece.add(adj);\n      }\n    }\n  }\n\n  return Array.from(piece);\n};\n\nconst splitContinuous = (slots: number[]) => {\n  const groups = [];\n  while (slots.length > 0) {\n    const group = takeConnected(slots);\n    groups.push(group);\n  }\n  return groups;\n};\n\nexport const regroupPieces = (\n  pieces: PieceData[],\n  draggingPiece: PieceData | undefined\n): PieceData[] => {\n  const splittablePieces = draggingPiece\n    ? pieces.filter(piece => piece.id !== draggingPiece.id)\n    : [...pieces];\n\n  const newPieces: PieceData[] = [];\n\n  const kindGroups = _groupBy(splittablePieces, \"kind\");\n  for (const key in kindGroups) {\n    const slotGroup = _flatten(kindGroups[key].map(piece => piece.slots));\n    const continuousGroups = splitContinuous(slotGroup);\n    continuousGroups\n      .map(slots => ({ id: newId(\"piece\"), slots, kind: key }))\n      .forEach(piece => newPieces.push(piece));\n  }\n\n  if (draggingPiece) {\n    newPieces.push(draggingPiece);\n  }\n\n  return newPieces;\n};\n","import React from \"react\";\nimport { XYCoord } from \"react-dnd\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport { GameContext } from \"../context/GameContext\";\nimport { PieceData } from \"../types/game\";\nimport { translatePieceToSlot } from \"../utils/gameUtils\";\nimport { regroupPieces } from \"../utils/regroupPieces\";\n\nconst translateSlotHoriz = (slot: number, count: number) => {\n  const y = Math.floor(slot / ROW_LENGTH);\n  const prevX = slot - y * ROW_LENGTH;\n  const newX = (prevX + count) % ROW_LENGTH;\n  const newSlot = newX + y * ROW_LENGTH;\n  return newSlot;\n};\n\nconst calculateHoverCell = (windowPos: XYCoord, offset: XYCoord) => {\n  const relX = offset.x - windowPos.x;\n  const relY = offset.y - windowPos.y;\n  const row = Math.floor(relY / CELL_WIDTH);\n  const hoverCell = ROW_LENGTH * row + Math.floor(relX / CELL_WIDTH);\n  return hoverCell;\n};\n\nexport const usePieceControls = () => {\n  const {\n    pieces,\n    setPieces,\n    setDraggingPiece,\n    windowPos,\n    setHoverCell,\n    hoverCell,\n    draggingPiece\n  } = React.useContext(GameContext);\n\n  const shiftRight = React.useCallback(\n    (count: number = 1) => {\n      setPieces(prevPieces => {\n        const translatedPieces = prevPieces.map(p => {\n          const newSlots = p.slots.map(slot => translateSlotHoriz(slot, count));\n          return { ...p, slots: newSlots };\n        });\n        return regroupPieces(translatedPieces, draggingPiece);\n      });\n    },\n    [draggingPiece, setPieces]\n  );\n\n  // const removePiece = (pieceId: string | number) => {\n  //   setPieces(prevPieces => prevPieces.filter(({ id }) => id !== pieceId));\n  // };\n\n  const setDragPieceOffset = React.useCallback(\n    (piece: PieceData, offset: XYCoord) => {\n      setDraggingPiece(piece);\n      if (!windowPos) {\n        return;\n      }\n      setHoverCell(calculateHoverCell(windowPos, offset));\n    },\n    [setDraggingPiece, setHoverCell, windowPos]\n  );\n\n  const cleanupDrag = () => {\n    setDraggingPiece(undefined);\n    setHoverCell(undefined);\n  };\n\n  const handlePieceDropped = (piece: PieceData) => {\n    console.log(\"dropped at\", hoverCell);\n    if (hoverCell === undefined) {\n      console.error(\"handlePieceDropped\", piece, hoverCell);\n      return;\n    }\n    setPieces(prevPieces => {\n      const translatedPieces = prevPieces.map(p =>\n        p.id === piece.id ? translatePieceToSlot(piece, hoverCell) : p\n      );\n      return regroupPieces(translatedPieces, undefined);\n    });\n    cleanupDrag();\n  };\n\n  const handlePieceMissed = (piece: PieceData) => {\n    console.log(\"missed at\", hoverCell);\n    cleanupDrag();\n  };\n\n  return {\n    pieces,\n    shiftRight,\n    setDragPieceOffset,\n    handlePieceDropped,\n    handlePieceMissed\n  };\n};\n","import React from \"react\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport { CellData } from \"../types/game\";\n\nexport interface CellLayerProps {\n  cells: CellData[];\n  renderCell: React.FC<CellData>;\n}\n\nconst CellLayer: React.FC<CellLayerProps> = props => {\n  const { cells, renderCell } = props;\n\n  return (\n    <div style={{ position: \"absolute\" }}>\n      {cells.map(cellData => {\n        const { slot } = cellData;\n        const y = Math.floor(slot / ROW_LENGTH);\n        const x = slot - y * ROW_LENGTH;\n        return (\n          <div\n            key={slot}\n            style={{\n              position: \"absolute\",\n              top: y * CELL_WIDTH,\n              left: x * CELL_WIDTH,\n              width: CELL_WIDTH,\n              height: CELL_WIDTH\n            }}\n          >\n            {renderCell(cellData)}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n// export default React.memo(CellLayer);\nexport default CellLayer;\n","import React from \"react\";\nimport { CELL_WIDTH } from \"../constants\";\n\nexport interface CellProps {\n  slot: number;\n  style?: React.CSSProperties;\n  showLabel?: boolean;\n}\n\nconst Cell: React.FC<CellProps> = props => {\n  const { slot, style = {}, showLabel = false } = props;\n  const width = CELL_WIDTH;\n  return (\n    <div\n      style={{\n        width,\n        height: width,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        ...style\n      }}\n    >\n      {showLabel && <span>{slot}</span>}\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"../components/Cell\";\nimport { PieceKind } from \"../types/game\";\n\nconst usePieceCellPainter = (\n  kindFn: (slot: number) => PieceKind,\n  config: { isHidden: boolean } = { isHidden: false }\n) => {\n  const { isHidden } = config;\n\n  const renderCell = React.useCallback(\n    ({ slot }) => {\n      const kind = kindFn(slot);\n      return (\n        <Cell\n          slot={slot}\n          style={isHidden ? { display: \"none\" } : { backgroundColor: kind }}\n        />\n      );\n    },\n    [kindFn, isHidden]\n  );\n  return renderCell;\n};\n\nexport default usePieceCellPainter;\n","import React from \"react\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport CellLayer from \"./CellLayer\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\nimport { GameContext } from \"../context/GameContext\";\n\nexport interface CascadeWindowProps {\n  style?: React.CSSProperties;\n}\n\nconst CascadeWindow: React.FC<CascadeWindowProps> = props => {\n  const { style = {} } = props;\n  const { cascadeView } = React.useContext(GameContext);\n\n  const width = CELL_WIDTH * ROW_LENGTH;\n  const height = CELL_WIDTH;\n\n  const getKind = React.useCallback(\n    (slot: number) => cascadeView.find(cell => cell.slot === slot)!.kind,\n    [cascadeView]\n  );\n  const renderCell = usePieceCellPainter(getKind);\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: \"text\",\n        ...style\n      }}\n    >\n      <CellLayer cells={cascadeView} renderCell={renderCell} />\n    </div>\n  );\n};\n\nexport default CascadeWindow;\n","import React from \"react\";\nimport { CELL_WIDTH, ROW_LENGTH } from \"../constants\";\nimport { GameContext } from \"../context/GameContext\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\nimport CellLayer from \"./CellLayer\";\n\nexport interface KeyWindowProps {\n  style?: React.CSSProperties;\n}\n\nconst KeyWindow: React.FC<KeyWindowProps> = props => {\n  const { style } = props;\n  const { key } = React.useContext(GameContext);\n\n  const width = CELL_WIDTH * ROW_LENGTH;\n  const height = CELL_WIDTH;\n\n  const getKind = React.useCallback(\n    (slot: number) => key.find(cell => cell.slot === slot)!.kind,\n    [key]\n  );\n  const renderCell = usePieceCellPainter(getKind);\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: \"text\",\n        ...style\n      }}\n    >\n      <CellLayer cells={key} renderCell={renderCell} />\n    </div>\n  );\n};\n\nexport default KeyWindow;\n","import React from \"react\";\nimport { Timeline } from \"react-ensemble\";\n\nexport interface LoopManagerProps {\n  speed: number;\n  playing: boolean;\n  onShift: () => void;\n}\n\nconst LoopManager: React.FC<LoopManagerProps> = props => {\n  const { speed, playing, onShift } = props;\n  const [flag, setFlag] = React.useState(false);\n  const [tick, setTick] = React.useState(0);\n\n  return (\n    <Timeline\n      playing={playing}\n      endBehavior=\"loop\"\n      defaultState={{ flag: 0 }}\n      track={[{ duration: speed * 2000, state: { flag: { to: 2 } } }]}\n      value={tick}\n      onTick={({ value }) => setTick(value)}\n      onUpdate={({ state }) => {\n        const newFlag = !!Math.floor(state.flag);\n        if (newFlag !== flag) {\n          onShift();\n        }\n        setFlag(newFlag);\n      }}\n    />\n  );\n};\n\nexport default LoopManager;\n","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport CellLayer from \"./CellLayer\";\nimport { ItemTypes } from \"../constants\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { PieceData } from \"../types/game\";\nimport { usePieceControls } from \"../hooks/pieceControls\";\nimport { usePieceDrop } from \"../hooks/pieceDrop\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\n\nexport interface PieceProps extends PieceData {}\n\nconst Piece: React.FC<PieceProps> = props => {\n  const { slots, kind, id } = props;\n  const { handlePieceDropped, handlePieceMissed } = usePieceControls();\n  const { dropRef } = usePieceDrop();\n\n  const [{ isDragging }, drag, preview] = useDrag({\n    item: { type: ItemTypes.Piece, slots, kind, id },\n    end: (item, monitor) => {\n      if (!item) {\n        return;\n      }\n      const didDrop = monitor.didDrop();\n      if (didDrop) {\n        handlePieceDropped(item);\n      } else {\n        handlePieceMissed(item);\n      }\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n\n  React.useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, [preview]);\n\n  const cells = React.useMemo(() => slots.map(slot => ({ slot })), [slots]);\n  const getKind = React.useCallback(() => kind, [kind]);\n  const renderCell = usePieceCellPainter(getKind, { isHidden: isDragging });\n\n  function doubleRef(el: any) {\n    drag(el);\n    dropRef(el);\n  }\n\n  return (\n    <React.Fragment>\n      <div\n        ref={doubleRef}\n        style={{\n          cursor: \"move\",\n          position: \"absolute\"\n        }}\n      >\n        <CellLayer cells={cells} renderCell={renderCell} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Piece;\n","import React from \"react\";\nimport { XYCoord } from \"react-dnd\";\nimport {\n  CELL_WIDTH,\n  COLUMN_HEIGHT,\n  PIECE_PREVIEW_OFFSET,\n  ROW_LENGTH\n} from \"../constants\";\nimport usePieceCellPainter from \"../hooks/pieceCellPainter\";\nimport { PieceData } from \"../types/game\";\nimport CellLayer from \"./CellLayer\";\n\nexport interface PiecePreviewProps {\n  piece: PieceData;\n  offset: XYCoord;\n}\n\nconst PiecePreview: React.FC<PiecePreviewProps> = props => {\n  const { piece, offset } = props;\n  const { slots } = piece;\n\n  const cells = React.useMemo(() => slots.map(slot => ({ slot })), [slots]);\n  const getKind = React.useCallback(() => piece.kind, [piece]);\n  const renderCell = usePieceCellPainter(getKind);\n\n  const xFromCursor = React.useMemo(() => {\n    const slotCols = piece.slots.map(slot => slot % ROW_LENGTH);\n    const minSlot = Math.min(...slotCols);\n    return minSlot * CELL_WIDTH;\n  }, [piece]);\n\n  const yFromCursor = React.useMemo(() => {\n    const slotRows = piece.slots.map(slot => slot % COLUMN_HEIGHT);\n    const minRow = Math.min(...slotRows);\n    return minRow * CELL_WIDTH;\n  }, [piece]);\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        top: offset.y - yFromCursor + PIECE_PREVIEW_OFFSET,\n        left: offset.x - xFromCursor + PIECE_PREVIEW_OFFSET\n      }}\n    >\n      <CellLayer cells={cells} renderCell={renderCell} />\n    </div>\n  );\n};\n\nexport default PiecePreview;\n","import React from \"react\";\nimport { useDragLayer } from \"react-dnd\";\nimport { usePieceControls } from \"../hooks/pieceControls\";\nimport { PieceData } from \"../types/game\";\nimport Piece from \"./Piece\";\nimport PiecePreview from \"./PiecePreview\";\n\nexport interface PieceLayerProps {\n  pieces: PieceData[];\n}\n\nconst PieceLayer: React.FC<PieceLayerProps> = props => {\n  const { pieces } = props;\n  const { setDragPieceOffset } = usePieceControls();\n\n  const { item, absoluteOffset } = useDragLayer(monitor => ({\n    item: monitor.getItem() as PieceData | undefined,\n    absoluteOffset: monitor.getClientOffset()\n  }));\n\n  React.useEffect(() => {\n    if (item && absoluteOffset) {\n      setDragPieceOffset(item, absoluteOffset);\n    }\n  }, [item, absoluteOffset, setDragPieceOffset]);\n\n  return (\n    <React.Fragment>\n      {item && absoluteOffset && (\n        <PiecePreview piece={item} offset={absoluteOffset} />\n      )}\n      {pieces.map(piece => (\n        <Piece\n          key={piece.id}\n          id={piece.id}\n          slots={piece.slots}\n          kind={piece.kind}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default PieceLayer;\n","import React from \"react\";\nimport { GameColors } from \"../constants\";\nimport { useBoardControls } from \"../hooks/boardControls\";\nimport { usePieceDrop } from \"../hooks/pieceDrop\";\nimport { CellData } from \"../types/game\";\nimport Cell from \"./Cell\";\nimport CellLayer from \"./CellLayer\";\n\nexport interface DropLayerProps {\n  cells: CellData[];\n}\n\nconst DropLayer: React.FC<DropLayerProps> = props => {\n  const { cells } = props;\n  const { highlightedCells } = useBoardControls();\n  const { dropRef } = usePieceDrop();\n\n  return (\n    <div ref={dropRef}>\n      <CellLayer\n        cells={cells}\n        renderCell={({ slot }) => (\n          <Cell\n            key={slot}\n            slot={slot}\n            style={{\n              backgroundColor: highlightedCells.includes(slot)\n                ? GameColors.highlight\n                : \"inherit\",\n              opacity: 0.5\n            }}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default DropLayer;\n","import React from \"react\";\n\nconst useRectPoller = () => {\n  const [rect, setRect] = React.useState<DOMRect>();\n  const divRef = React.createRef<HTMLDivElement>();\n\n  React.useEffect(() => {\n    if (!divRef.current) {\n      return;\n    }\n    setInterval(() => {\n      if (!divRef.current) {\n        return;\n      }\n      const currentRect = divRef.current.getBoundingClientRect();\n      setRect(currentRect);\n    }, 1000);\n  }, [divRef]);\n\n  const top = rect?.top;\n  const left = rect?.left;\n\n  return { rect, divRef, top, left };\n};\n\nexport default useRectPoller;\n","import React from \"react\";\nimport { CELL_WIDTH, COLUMN_HEIGHT, ROW_LENGTH } from \"../constants\";\nimport Cell from \"./Cell\";\nimport CellLayer from \"./CellLayer\";\nimport PieceLayer from \"./PieceLayer\";\nimport DropLayer from \"./DropLayer\";\nimport { CellData, PieceData } from \"../types/game\";\nimport useRectPoller from \"../hooks/rectPoller\";\nimport { useBoardControls } from \"../hooks/boardControls\";\n\nexport interface LoopWindowProps {\n  boardCells: CellData[];\n  pieces: PieceData[];\n}\n\nconst LoopWindow: React.FC<LoopWindowProps> = props => {\n  const { boardCells, pieces } = props;\n  const { setWindowPos } = useBoardControls();\n  const { top, left, divRef } = useRectPoller();\n\n  React.useEffect(() => {\n    if (top === undefined || left === undefined) {\n      return;\n    }\n    setWindowPos({ x: left, y: top });\n  }, [top, left, setWindowPos]);\n\n  const width = CELL_WIDTH * ROW_LENGTH;\n  const height = CELL_WIDTH * COLUMN_HEIGHT;\n\n  const dashLayerRenderCell = React.useCallback(\n    ({ slot }) => (\n      <Cell\n        slot={slot}\n        // showLabel\n        // style={{\n        //   borderWidth: 1,\n        //   borderColor: \"text\",\n        //   borderStyle: \"dashed\",\n        //   opacity: 0.5\n        // }}\n      />\n    ),\n    []\n  );\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: \"text\"\n      }}\n      ref={divRef}\n    >\n      <CellLayer cells={boardCells} renderCell={dashLayerRenderCell} />\n      <DropLayer cells={boardCells} />\n      <PieceLayer pieces={pieces} />\n    </div>\n  );\n};\n\nexport default LoopWindow;\n","import React from \"react\";\nimport { useBoardControls } from \"../hooks/boardControls\";\nimport { usePieceControls } from \"../hooks/pieceControls\";\nimport CascadeWindow from \"./CascadeWindow\";\nimport KeyWindow from \"./KeyWindow\";\nimport LoopManager from \"./LoopManager\";\nimport LoopWindow from \"./LoopWindow\";\n\nexport interface BoardProps {}\n\nconst Board: React.FC<BoardProps> = props => {\n  const { boardCells } = useBoardControls();\n  const { pieces, shiftRight } = usePieceControls();\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n\n  return (\n    <div\n      style={{\n        margin: \"auto\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n        flexDirection: \"column\"\n      }}\n    >\n      <LoopManager speed={1} playing={isPlaying} onShift={shiftRight} />\n\n      <KeyWindow style={{ marginBottom: 36 }} />\n      <LoopWindow boardCells={boardCells} pieces={pieces} />\n      <CascadeWindow style={{ marginTop: 36 }} />\n\n      <button\n        onClick={() => setIsPlaying(prev => !prev)}\n        style={{ marginTop: 24 }}\n      >\n        {isPlaying ? \"Pause\" : \"Play\"}\n      </button>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport { GameContextProvider } from \"./context/GameContext\";\n\nfunction App() {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <GameContextProvider>\n        <div>\n          <Board />\n        </div>\n      </GameContextProvider>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}